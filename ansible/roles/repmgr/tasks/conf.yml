- name: wal.conf
  template: src=wal.conf dest="{{PG_ETC}}/conf.d/wal.conf" force=no owner=postgres group=postgres
  register: walconf

- name: set wal_archive in wal.conf
  lineinfile: dest="{{PG_ETC}}/conf.d/wal.conf" regexp="^ *wal_log_hints *=" line="wal_log_hints = on"
  when: not walconf.changed

- name: set wal_archive in wal.conf
  lineinfile: dest="{{PG_ETC}}/conf.d/wal.conf" regexp="^ *wal_keep_segments *=" line="wal_keep_segments = {{wal_keep_segments}}"
  when: not walconf.changed and PG_VERSION != 9.6

- name: pg_hba.conf
  pg_hba: 
    databases="{{item[0]}}" 
    users=repmgr 
    source="{{hostvars[item[1]].ansible_default_ipv4.address}}/32"
    method=trust
    dest="{{PG_ETC}}/pg_hba.conf"
  with_nested:
    - [ replication, repmgr ]
    - "{{play_hosts}}"
  register: pg_hbaconf

- name: restart/reload postgres
  service: name=postgres state='{% if walconf.changed %}restarted{% else %}reloaded{% endif %}'
  when: inventory_hostname == play_hosts[0]
  #So you can fix a broken standby with this playbook...
  #Standby will be stopped and started later anyway.

- name: detect repmgr_id
  set_fact: repmgr_id={{item.0 + 1}}
  with_indexed_items: "{{play_hosts}}"
  when: item.1 == inventory_hostname

- name: repmgr.conf
  template: src=repmgr.conf dest="{{repmgr_conf}}" owner=postgres group=postgres

